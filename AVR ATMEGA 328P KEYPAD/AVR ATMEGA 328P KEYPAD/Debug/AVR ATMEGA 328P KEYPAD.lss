
AVR ATMEGA 328P KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c1c  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000894  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005cf  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045e  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000237  00000000  00000000  000023aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000025e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 98 00 	jmp	0x130	; 0x130 <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	f6 00       	.word	0x00f6	; ????
  6a:	06 01       	movw	r0, r12
  6c:	ea 00       	.word	0x00ea	; ????
  6e:	de 00       	.word	0x00de	; ????
  70:	06 01       	movw	r0, r12
  72:	06 01       	movw	r0, r12
  74:	06 01       	movw	r0, r12
  76:	06 01       	movw	r0, r12
  78:	06 01       	movw	r0, r12
  7a:	06 01       	movw	r0, r12
  7c:	06 01       	movw	r0, r12
  7e:	06 01       	movw	r0, r12
  80:	06 01       	movw	r0, r12
  82:	06 01       	movw	r0, r12
  84:	06 01       	movw	r0, r12
  86:	06 01       	movw	r0, r12
  88:	06 01       	movw	r0, r12
  8a:	06 01       	movw	r0, r12
  8c:	06 01       	movw	r0, r12
  8e:	06 01       	movw	r0, r12
  90:	06 01       	movw	r0, r12
  92:	06 01       	movw	r0, r12
  94:	06 01       	movw	r0, r12
  96:	06 01       	movw	r0, r12
  98:	06 01       	movw	r0, r12
  9a:	06 01       	movw	r0, r12
  9c:	06 01       	movw	r0, r12
  9e:	06 01       	movw	r0, r12
  a0:	06 01       	movw	r0, r12
  a2:	06 01       	movw	r0, r12
  a4:	06 01       	movw	r0, r12
  a6:	06 01       	movw	r0, r12
  a8:	06 01       	movw	r0, r12
  aa:	06 01       	movw	r0, r12
  ac:	06 01       	movw	r0, r12
  ae:	06 01       	movw	r0, r12
  b0:	06 01       	movw	r0, r12
  b2:	06 01       	movw	r0, r12
  b4:	06 01       	movw	r0, r12
  b6:	06 01       	movw	r0, r12
  b8:	06 01       	movw	r0, r12
  ba:	06 01       	movw	r0, r12
  bc:	06 01       	movw	r0, r12
  be:	06 01       	movw	r0, r12
  c0:	06 01       	movw	r0, r12
  c2:	06 01       	movw	r0, r12
  c4:	06 01       	movw	r0, r12
  c6:	06 01       	movw	r0, r12
  c8:	06 01       	movw	r0, r12
  ca:	06 01       	movw	r0, r12
  cc:	06 01       	movw	r0, r12
  ce:	06 01       	movw	r0, r12
  d0:	06 01       	movw	r0, r12
  d2:	06 01       	movw	r0, r12
  d4:	06 01       	movw	r0, r12
  d6:	06 01       	movw	r0, r12
  d8:	06 01       	movw	r0, r12
  da:	06 01       	movw	r0, r12
  dc:	06 01       	movw	r0, r12
  de:	06 01       	movw	r0, r12
  e0:	02 01       	movw	r0, r4
  e2:	06 01       	movw	r0, r12
  e4:	06 01       	movw	r0, r12
  e6:	06 01       	movw	r0, r12
  e8:	fa 00       	.word	0x00fa	; ????
  ea:	06 01       	movw	r0, r12
  ec:	ee 00       	.word	0x00ee	; ????
  ee:	e2 00       	.word	0x00e2	; ????
  f0:	06 01       	movw	r0, r12
  f2:	06 01       	movw	r0, r12
  f4:	06 01       	movw	r0, r12
  f6:	06 01       	movw	r0, r12
  f8:	06 01       	movw	r0, r12
  fa:	06 01       	movw	r0, r12
  fc:	06 01       	movw	r0, r12
  fe:	06 01       	movw	r0, r12
 100:	06 01       	movw	r0, r12
 102:	06 01       	movw	r0, r12
 104:	06 01       	movw	r0, r12
 106:	06 01       	movw	r0, r12
 108:	06 01       	movw	r0, r12
 10a:	06 01       	movw	r0, r12
 10c:	06 01       	movw	r0, r12
 10e:	06 01       	movw	r0, r12
 110:	06 01       	movw	r0, r12
 112:	06 01       	movw	r0, r12
 114:	06 01       	movw	r0, r12
 116:	06 01       	movw	r0, r12
 118:	06 01       	movw	r0, r12
 11a:	06 01       	movw	r0, r12
 11c:	06 01       	movw	r0, r12
 11e:	06 01       	movw	r0, r12
 120:	06 01       	movw	r0, r12
 122:	06 01       	movw	r0, r12
 124:	06 01       	movw	r0, r12
 126:	06 01       	movw	r0, r12
 128:	fe 00       	.word	0x00fe	; ????
 12a:	06 01       	movw	r0, r12
 12c:	f2 00       	.word	0x00f2	; ????
 12e:	e6 00       	.word	0x00e6	; ????

00000130 <__ctors_end>:
 130:	11 24       	eor	r1, r1
 132:	1f be       	out	0x3f, r1	; 63
 134:	cf ef       	ldi	r28, 0xFF	; 255
 136:	d8 e0       	ldi	r29, 0x08	; 8
 138:	de bf       	out	0x3e, r29	; 62
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	0e 94 c8 00 	call	0x190	; 0x190 <main>
 140:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <setcoloutrowin>:
#define colpins(a,b,c,d) (((1<<a)|(1<<b)|(1<<c)|(1<<d)))
#define rowpins(e,f,g,h) (((1<<e)|(1<<f)|(1<<g)|(1<<h)))

void setcoloutrowin(){
	
	DDRD&=~ rowpins(row0,row1,row2,row3);	//ROWS in (first change status to input	)
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	8a b9       	out	0x0a, r24	; 10
	
	PORTD=rowpins(row0,row1,row2,row3);	//Pullup (modify complete port, not selected bits otherwise previously
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	8b b9       	out	0x0b, r24	; 11
	
	
	DDRD|=colpins(col0,col1,col2,col3);	//col out(if this is used 1st then both connected
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	80 6f       	ori	r24, 0xF0	; 240
 156:	8a b9       	out	0x0a, r24	; 10
 158:	08 95       	ret

0000015a <setrowoutcolin>:
	
}

void setrowoutcolin(){

DDRD&=~ colpins(col0,col1,col2,col3);//cols in
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	8a b9       	out	0x0a, r24	; 10

PORTD=colpins(col0,col1,col2,col3);	//Pullup (modify complete port, not selected bits otherwise previously
 160:	80 ef       	ldi	r24, 0xF0	; 240
 162:	8b b9       	out	0x0b, r24	; 11

//pulled up remain at 1. So set them to zero. This way input pulled to output also goes through intermediate stage

//_delay_ms(2);
DDRD|=rowpins(row0,row1,row2,row3);	//row out
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	8f 60       	ori	r24, 0x0F	; 15
 168:	8a b9       	out	0x0a, r24	; 10
 16a:	08 95       	ret

0000016c <waitforpress>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	00 c0       	rjmp	.+0      	; 0x16e <waitforpress+0x2>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <waitforpress+0x4>
 170:	00 00       	nop
void waitforpress(){
	
_delay_us(5);	//If this delay is removed PIND remains zero and thus doesn't wait for press. If set >1us and < 5us than PIND gets set correctly for while check but not for the next debug instruction i.e PORTC=PIND&0xF0. Half the bits still remain zero
//PORTC=(PIND&0xF0)>>4;	

	while ((PIND&0xF0)==0xF0)
 172:	89 b1       	in	r24, 0x09	; 9
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	80 3f       	cpi	r24, 0xF0	; 240
 178:	e1 f3       	breq	.-8      	; 0x172 <waitforpress+0x6>
	{
	}


}
 17a:	08 95       	ret

0000017c <waitforrelease>:


void waitforrelease(){
//PORTC=(PIND&0x0f);	
	//_delay_us(1);	
	while ((PIND&0x0F)!=0x0F)
 17c:	89 b1       	in	r24, 0x09	; 9
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	8f 30       	cpi	r24, 0x0F	; 15
 182:	e1 f7       	brne	.-8      	; 0x17c <waitforrelease>
	{
	}

PORTC=(PIND&0x0f);		
 184:	89 b1       	in	r24, 0x09	; 9
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	88 b9       	out	0x08, r24	; 8
 18a:	08 95       	ret

0000018c <readport>:
}


char readport(){
	
	return PIND;
 18c:	89 b1       	in	r24, 0x09	; 9
	
 18e:	08 95       	ret

00000190 <main>:
int main(void)
{
    /* Replace with your application code */
    
	unsigned char ch;
	UCSR0B&=~(1<<TXEN0);
 190:	e1 ec       	ldi	r30, 0xC1	; 193
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	80 83       	st	Z, r24
	UCSR0B&=~(1<<RXEN0);
 19a:	80 81       	ld	r24, Z
 19c:	8f 7e       	andi	r24, 0xEF	; 239
 19e:	80 83       	st	Z, r24
	while (1) 
    {
    ch=readkeypad();
 1a0:	0e 94 09 01 	call	0x212	; 0x212 <readkeypad>
    //if (ch==0b01111110)
		//{DDRB=0xff;	PORTB=1;}
	
	switch(ch){
 1a4:	48 2f       	mov	r20, r24
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	fa 01       	movw	r30, r20
 1aa:	eb 57       	subi	r30, 0x7B	; 123
 1ac:	f1 09       	sbc	r31, r1
 1ae:	e4 36       	cpi	r30, 0x64	; 100
 1b0:	f1 05       	cpc	r31, r1
 1b2:	60 f5       	brcc	.+88     	; 0x20c <main+0x7c>
 1b4:	ec 5c       	subi	r30, 0xCC	; 204
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__tablejump2__>
		
		case one:				writetoport(1); break;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 1c2:	ee cf       	rjmp	.-36     	; 0x1a0 <main+0x10>
		case 0b10111110:		writetoport(2);	break;
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 1ca:	ea cf       	rjmp	.-44     	; 0x1a0 <main+0x10>
		case 0b11011110:		writetoport(3);	break;
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 1d2:	e6 cf       	rjmp	.-52     	; 0x1a0 <main+0x10>
		case 0b01111101:		writetoport(4);	break;
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 1da:	e2 cf       	rjmp	.-60     	; 0x1a0 <main+0x10>
		case 0b10111101:		writetoport(5);	break;
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 1e2:	de cf       	rjmp	.-68     	; 0x1a0 <main+0x10>
		case 0b11011101:		writetoport(6);	break;
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 1ea:	da cf       	rjmp	.-76     	; 0x1a0 <main+0x10>
		case 0b01111011:		writetoport(7);	break;
 1ec:	87 e0       	ldi	r24, 0x07	; 7
 1ee:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 1f2:	d6 cf       	rjmp	.-84     	; 0x1a0 <main+0x10>
		case 0b10111011:		writetoport(8);	break;
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 1fa:	d2 cf       	rjmp	.-92     	; 0x1a0 <main+0x10>
		case 0b11011011:		writetoport(9); break;
 1fc:	89 e0       	ldi	r24, 0x09	; 9
 1fe:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 202:	ce cf       	rjmp	.-100    	; 0x1a0 <main+0x10>
		case 0b10110111:		writetoport(0);	break;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 20a:	ca cf       	rjmp	.-108    	; 0x1a0 <main+0x10>
		default:		writetoport(ch);
 20c:	0e 94 3c 01 	call	0x278	; 0x278 <writetoport>
 210:	c7 cf       	rjmp	.-114    	; 0x1a0 <main+0x10>

00000212 <readkeypad>:
#include <util/delay.h>
#include <avr/io.h>
#define rlength 4	//Number of row pins
#define clength 3

char readkeypad(){
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
	
	char row,col,in;
	//TWCR=0x00;
	DDRC=0xff;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	87 b9       	out	0x07, r24	; 7
	setrowoutcolin();
 21a:	0e 94 ad 00 	call	0x15a	; 0x15a <setrowoutcolin>
	
	waitforpress();
 21e:	0e 94 b6 00 	call	0x16c	; 0x16c <waitforpress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	87 ee       	ldi	r24, 0xE7	; 231
 226:	93 e0       	ldi	r25, 0x03	; 3
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <readkeypad+0x16>
 230:	00 c0       	rjmp	.+0      	; 0x232 <readkeypad+0x20>
 232:	00 00       	nop
	_delay_ms(80);//For debouncing
	col=readport();
 234:	0e 94 c6 00 	call	0x18c	; 0x18c <readport>
 238:	d8 2f       	mov	r29, r24
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	9c e9       	ldi	r25, 0x9C	; 156
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <readkeypad+0x2c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <readkeypad+0x32>
 244:	00 00       	nop
	_delay_ms(10);
	setcoloutrowin();
 246:	0e 94 a4 00 	call	0x148	; 0x148 <setcoloutrowin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	9a e1       	ldi	r25, 0x1A	; 26
 24c:	9a 95       	dec	r25
 24e:	f1 f7       	brne	.-4      	; 0x24c <readkeypad+0x3a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <readkeypad+0x40>
	_delay_us(5);//If this delay is less than 4us, correct value is not updated in PIND
	row=readport();
 252:	0e 94 c6 00 	call	0x18c	; 0x18c <readport>
 256:	c8 2f       	mov	r28, r24
	waitforrelease();
 258:	0e 94 be 00 	call	0x17c	; 0x17c <waitforrelease>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	87 ee       	ldi	r24, 0xE7	; 231
 260:	93 e0       	ldi	r25, 0x03	; 3
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <readkeypad+0x50>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <readkeypad+0x5a>
 26c:	00 00       	nop
	_delay_ms(80);// For debouncing
	
	in=(col+row);
	
	return (in);
}
 26e:	8d 2f       	mov	r24, r29
 270:	8c 0f       	add	r24, r28
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <writetoport>:
void writetoport(char ch){
	
	


PORTC=ch;	
 278:	88 b9       	out	0x08, r24	; 8
 27a:	08 95       	ret

0000027c <__tablejump2__>:
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	05 90       	lpm	r0, Z+
 282:	f4 91       	lpm	r31, Z
 284:	e0 2d       	mov	r30, r0
 286:	09 94       	ijmp

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
